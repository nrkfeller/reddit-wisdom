import re
import requests
from typing import Set
import os


class TickerExtractor:
    def __init__(self):
        self.finnhub_api_key = os.getenv("FINNHUB_API_KEY", "demo")
        self.ticker_pattern = re.compile(r"\$([A-Z]{1,5})\b|\b([A-Z]{2,5})\b")
        self.common_words = {
            "THE",
            "AND",
            "FOR",
            "ARE",
            "BUT",
            "NOT",
            "YOU",
            "ALL",
            "CAN",
            "HER",
            "WAS",
            "ONE",
            "OUR",
            "OUT",
            "DAY",
            "GET",
            "HAS",
            "HIM",
            "HIS",
            "HOW",
            "ITS",
            "MAY",
            "NEW",
            "NOW",
            "OLD",
            "SEE",
            "TWO",
            "WHO",
            "BOY",
            "DID",
            "ITS",
            "LET",
            "PUT",
            "SAY",
            "SHE",
            "TOO",
            "USE",
            "THIS",
            "THAT",
            "WITH",
            "HAVE",
            "FROM",
            "THEY",
            "KNOW",
            "WANT",
            "BEEN",
            "GOOD",
            "MUCH",
            "SOME",
            "TIME",
            "VERY",
            "WHEN",
            "COME",
            "HERE",
            "JUST",
            "LIKE",
            "LONG",
            "MAKE",
            "MANY",
            "OVER",
            "SUCH",
            "TAKE",
            "THAN",
            "THEM",
            "WELL",
            "WERE",
            "WILL",
            "WORK",
            "YEAR",
            "YOUR",
            "BACK",
            "CALL",
            "CAME",
            "EACH",
            "EVEN",
            "FIND",
            "GIVE",
            "HAND",
            "HIGH",
            "KEEP",
            "LAST",
            "LEFT",
            "LIFE",
            "LIVE",
            "LOOK",
            "MADE",
            "MOST",
            "MOVE",
            "MUST",
            "NAME",
            "NEED",
            "NEXT",
            "ONLY",
            "OPEN",
            "PART",
            "PLAY",
            "RIGHT",
            "SAID",
            "SAME",
            "SEEM",
            "SHOW",
            "SIDE",
            "TELL",
            "TURN",
            "USED",
            "WANT",
            "WAYS",
            "WEEK",
            "WENT",
            "WHAT",
            "WHERE",
            "WHICH",
            "WHILE",
            "WORD",
            "WORK",
            "WORLD",
            "WOULD",
            "WRITE",
            "YEAR",
            "YOUNG",
            "ABOUT",
            "AFTER",
            "AGAIN",
            "AGAINST",
            "ALMOST",
            "ALONE",
            "ALONG",
            "ALREADY",
            "ALSO",
            "ALTHOUGH",
            "ALWAYS",
            "AMONG",
            "ANOTHER",
            "AROUND",
            "BECAUSE",
            "BECOME",
            "BEFORE",
            "BEGAN",
            "BEING",
            "BELIEVE",
            "BELOW",
            "BETWEEN",
            "BOTH",
            "BRING",
            "CAME",
            "CANNOT",
            "CHANGE",
            "COULD",
            "DIFFERENT",
            "DOES",
            "DOING",
            "DONE",
            "DOWN",
            "DURING",
            "EARLY",
            "EVERY",
            "EXAMPLE",
            "FAMILY",
            "FEEL",
            "FELT",
            "FIRST",
            "FOUND",
            "GENERAL",
            "GOING",
            "GREAT",
            "GROUP",
            "HAPPEN",
            "HAVING",
            "HEARD",
            "HELP",
            "HOWEVER",
            "IMPORTANT",
            "INCLUDING",
            "INTEREST",
            "INTO",
            "LARGE",
            "LATER",
            "LEARN",
            "LEAVE",
            "LEVEL",
            "LINE",
            "LITTLE",
            "LOCAL",
            "LONG",
            "MADE",
            "MAKING",
            "MEMBER",
            "MIGHT",
            "MONEY",
            "NEVER",
            "NUMBER",
            "OFTEN",
            "ORDER",
            "OTHER",
            "OTHERS",
            "PLACE",
            "POINT",
            "POSSIBLE",
            "PRESENT",
            "PROBLEM",
            "PROGRAM",
            "PUBLIC",
            "QUESTION",
            "RATHER",
            "REALLY",
            "REASON",
            "RESULT",
            "SCHOOL",
            "SECOND",
            "SEVERAL",
            "SHALL",
            "SHOULD",
            "SINCE",
            "SMALL",
            "SOCIAL",
            "SOMETHING",
            "SPECIAL",
            "STILL",
            "SYSTEM",
            "THEIR",
            "THERE",
            "THESE",
            "THING",
            "THINK",
            "THOSE",
            "THREE",
            "THROUGH",
            "TODAY",
            "TOGETHER",
            "TOWARD",
            "UNDER",
            "UNTIL",
            "USUALLY",
            "VALUE",
            "VARIOUS",
            "WATER",
            "WHOLE",
            "WITHOUT",
            "WITHIN",
            "YEARS",
            "YOUNG",
        }

    def extract_tickers(self, text: str) -> Set[str]:
        """Extract potential stock tickers from text"""
        if not text:
            return set()

        matches = self.ticker_pattern.findall(text.upper())
        tickers = set()

        for match in matches:
            ticker = match[0] if match[0] else match[1]
            if ticker and len(ticker) >= 2 and ticker not in self.common_words:
                tickers.add(ticker)

        return tickers

    def validate_ticker(self, ticker: str) -> bool:
        """Validate ticker using Finnhub API"""
        common_tickers = {
            "AAPL", "GOOGL", "GOOG", "MSFT", "AMZN", "TSLA", "META", "NVDA",
            "NFLX", "AMD", "INTC",
            "CRM", "ORCL", "ADBE", "PYPL", "UBER", "LYFT", "SNAP", "TWTR",
            "ZOOM", "SHOP",
            "BAC", "JPM", "WFC", "C", "GS", "MS", "USB", "PNC", "TFC", "COF",
            "AXP", "V", "MA",
            "BRK.A", "BRK.B", "BLK", "SCHW", "CME", "ICE", "SPGI", "MCO",
            "GME", "AMC", "BB", "NOK", "PLTR", "SPCE", "WISH", "CLOV", "MVIS",
            "SNDL", "BBBY",
            "HOOD", "COIN", "RBLX", "RIVN", "LCID", "NIO", "XPEV", "LI",
            "SPY", "QQQ", "IWM", "VTI", "VOO", "ARKK", "ARKQ", "ARKW", "ARKG", "ARKF",
            "TQQQ", "SQQQ", "UVXY", "VIX", "GLD", "SLV", "TLT", "HYG", "LQD",
            "JNJ", "PFE", "ABBV", "MRK", "TMO", "UNH", "LLY", "AMGN", "GILD",
            "BIIB", "MRNA", "BNTX",
            "XOM", "CVX", "COP", "EOG", "SLB", "HAL", "OXY", "DVN", "FANG",
            "MPC", "VLO", "PSX",
            "WMT", "TGT", "COST", "HD", "LOW", "NKE", "SBUX", "MCD", "DIS",
            "NFLX", "KO", "PEP",
            "BA", "CAT", "DE", "MMM", "GE", "HON", "UPS", "FDX", "LMT", "RTX",
            "NOC", "GD",
            "T", "VZ", "TMUS", "CHTR", "CMCSA", "PARA", "WBD", "FOXA", "NWSA"
        }

        ticker = ticker.upper()

        if self.finnhub_api_key == "demo":
            return ticker in common_tickers

        try:
            url = (f"https://finnhub.io/api/v1/quote?symbol={ticker}"
                   f"&token={self.finnhub_api_key}")
            response = requests.get(url, timeout=5)
            data = response.json()
            return "c" in data and data["c"] is not None and data["c"] > 0
        except Exception as e:
            print(f"Error validating ticker {ticker}: {e}")
            return ticker in common_tickers
